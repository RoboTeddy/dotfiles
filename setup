#!/usr/bin/env bash

cd "$(dirname "$0")" # cd to directory this file is in
DOTFILES_ROOT="$(pwd -P)"

### Utilities

info () {
	printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}
success () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

install_symlink () {
    src=$1
    dst=$2

    if [ ! -L "$dst" ] && [ -e "$dst" ] # non-symlink file is in the way
    then
        success "Renaming $dst to $dst.old"
        mv -n "$dst" "$dst.old"
    fi

    if [ ! -f "$dst" ] && [ ! -d "$dst" ]
    then
        ln -s "$src" "$dst"
        # should check for actual success....
        success "Symlinked $src to $dst"
    else
        success "Skipped $src"
    fi
}


### Homebrew (runs before symlinks are installed, since .bash_profile depends on brew & things in Brewfile)

if ! type "brew" > /dev/null
then
    info 'Installing homebrew...'
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

info 'Running brew bundle...'
brew bundle


### Pyenv

pyenv install -s 3.5.2
pyenv global 3.5.2
pip install --upgrade pip


### Dependency for bin/screenshot

info 'Installing dependencies for bin/screenshot'

sudo gem install --conservative aws-sdk -v '~> 2'

### Symlinks

info 'Writing symlinks...'
install_symlink "$DOTFILES_ROOT" "$HOME/dotfiles"
install_symlink "$DOTFILES_ROOT/.bash_profile" "$HOME/.bash_profile"
install_symlink "$DOTFILES_ROOT/.gitconfig" "$HOME/.gitconfig"
install_symlink "$DOTFILES_ROOT/.gitignore-global" "$HOME/.gitignore-global"
install_symlink "$DOTFILES_ROOT/Brewfile" "$HOME/Brewfile"
install_symlink "$DOTFILES_ROOT/karabiner/private.xml" "$HOME/Library/Application Support/Karabiner/private.xml"

SUBLIME_USER_ROOT="$HOME/Library/Application Support/Sublime Text 3/Packages/User"
for name in "Default (OSX).sublime-keymap" "Preferences.sublime-settings"
do
    install_symlink "$DOTFILES_ROOT/st3/$name" "$SUBLIME_USER_ROOT/$name"
done

### Karabiner
# Can reproduce this via `karabiner export`

info 'Configuring karabiner'

kara=/usr/local/bin/karabiner
$kara reloadxml
$kara set bilalh.remap.f19_escape_control 1
$kara set repeat.initial_wait 180
$kara set repeat.wait 33
$kara set remap.custom_global_screenshot 1


### Cron

info "Setting up periodic tasks"

for f in cron/*.plist
do
    dst="$HOME/Library/LaunchAgents/$(basename "$f")"
    install_symlink "$DOTFILES_ROOT/$f" "$dst"
    launchctl load -w "$dst"
    success "Set up $dst"
done

# internet-on and internet-off sudo /sbin/pfctl to modify the firewall
# task can't prompt for password, so let's modify sudoers.
# careful here! screwing up sudoers file is bad.
LINE="%admin ALL = NOPASSWD: /sbin/pfctl"
FILE=/etc/sudoers
sudo grep -q "$LINE" "$FILE" || sudo echo "$LINE" >> "$FILE"


### macOS Settings

info 'Writing macOS settings...'

defaults write -g ApplePressAndHoldEnabled -bool false

# Always open everything in Finder's list view. This is important.
# defaults write com.apple.Finder FXPreferredViewStyle Nlsv

# Show the ~/Library folder.
# chflags nohidden ~/Library
# chflags nohidden ~/.ssh

# Enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
sudo defaults write com.apple.AppleMultitouchTrackpad Clicking 1

# Move content in the direction of finger movement when scrolling or navigating (natural)
defaults write -g 'com.apple.swipescrolldirection' -bool false

# Launchpad: no
defaults write com.apple.dock 'showLaunchpadGestureEnabled' -bool false

# Show Desktop: yes
defaults write com.apple.dock 'showDesktopGestureEnabled' -bool true

# disable Dashboard
defaults write com.apple.dashboard mcx-disabled -bool true

# Don't Show Dashboard as a space
defaults write com.apple.dock 'dashboard-in-overlay' -bool false

# Set a really fast key repeat.
defaults write NSGlobalDomain KeyRepeat -int 0

# Set the Finder prefs for hiding a few different volumes on the Desktop.
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false

# Hide Safari's bookmark bar.
defaults write com.apple.Safari ShowFavoritesBar -bool false

# Set up Safari for development.
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
defaults write com.apple.Safari IncludeDevelopMenu -bool true
defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write com.apple.Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
defaults write NSGlobalDomain WebKitDeveloperExtras -bool true


info 'Sourcing ~/.bash_profile...'

source ~/.bash_profile

success 'Done!'

echo ""
echo "If you haven't already, make Seil and Karabiner look like this: "
echo "https://roboteddy-img.s3.amazonaws.com/48ae7592e808e11033f15f8b2cd59b73.png"
echo ""
